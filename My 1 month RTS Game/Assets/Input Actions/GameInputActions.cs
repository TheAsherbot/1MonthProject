//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Game"",
            ""id"": ""6d35016f-41f9-4b36-ac10-fcb8fcb3b25d"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""6d5d48fa-e986-4a2c-9edf-0286d49d6956"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action1"",
                    ""type"": ""Button"",
                    ""id"": ""43a56aa7-2182-4913-8a85-6d4deaefdcf5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftSelect"",
                    ""type"": ""Button"",
                    ""id"": ""bbfdea8c-d9e6-4985-bf4b-9ccfff1f6024"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b318f0c4-53a5-45f2-9e05-7d9b6062bd64"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd7ea6b8-09ea-40ba-8628-4e73c2419607"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90d2ac28-3155-4d44-b358-562c3c1362dd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMovement"",
            ""id"": ""bcfde268-a59b-4174-be8b-a622610b2ffb"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""abcc0f89-6daa-4165-b78c-79197870bb68"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""d2fc826a-c2a1-47b0-b537-0a5202327a6c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c40b894-8750-4692-95e8-3e538aa115d9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""db9353f7-a6f2-486b-9d5c-e29665e7069f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c8840cc2-c20b-4422-8ab9-0e9e8f34b037"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f9f96b09-7d0b-408d-a45e-18bf6bd85083"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""GameUI"",
            ""id"": ""92d3e38b-0bab-4bd3-a88d-ddbf49f4c26b"",
            ""actions"": [
                {
                    ""name"": ""HotBar1"",
                    ""type"": ""Button"",
                    ""id"": ""8e40c91e-9923-4798-94cc-50097c7bcece"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar2"",
                    ""type"": ""Button"",
                    ""id"": ""9b2bffde-ab24-47e7-9098-26c356851a13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HotBar3"",
                    ""type"": ""Button"",
                    ""id"": ""96ce6b7b-7602-4113-99c2-6efbb4743323"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0366deb1-e2bf-41e3-871c-c5aae51da15a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9be60b55-e536-45af-a281-d1aed66576af"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72f27a74-37be-4f56-805c-d5bacc386d87"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HotBar3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Game
        m_Game = asset.FindActionMap("Game", throwIfNotFound: true);
        m_Game_Select = m_Game.FindAction("Select", throwIfNotFound: true);
        m_Game_Action1 = m_Game.FindAction("Action1", throwIfNotFound: true);
        m_Game_ShiftSelect = m_Game.FindAction("ShiftSelect", throwIfNotFound: true);
        // CameraMovement
        m_CameraMovement = asset.FindActionMap("CameraMovement", throwIfNotFound: true);
        m_CameraMovement_Movement = m_CameraMovement.FindAction("Movement", throwIfNotFound: true);
        // GameUI
        m_GameUI = asset.FindActionMap("GameUI", throwIfNotFound: true);
        m_GameUI_HotBar1 = m_GameUI.FindAction("HotBar1", throwIfNotFound: true);
        m_GameUI_HotBar2 = m_GameUI.FindAction("HotBar2", throwIfNotFound: true);
        m_GameUI_HotBar3 = m_GameUI.FindAction("HotBar3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Game
    private readonly InputActionMap m_Game;
    private List<IGameActions> m_GameActionsCallbackInterfaces = new List<IGameActions>();
    private readonly InputAction m_Game_Select;
    private readonly InputAction m_Game_Action1;
    private readonly InputAction m_Game_ShiftSelect;
    public struct GameActions
    {
        private @GameInputActions m_Wrapper;
        public GameActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Select => m_Wrapper.m_Game_Select;
        public InputAction @Action1 => m_Wrapper.m_Game_Action1;
        public InputAction @ShiftSelect => m_Wrapper.m_Game_ShiftSelect;
        public InputActionMap Get() { return m_Wrapper.m_Game; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameActions set) { return set.Get(); }
        public void AddCallbacks(IGameActions instance)
        {
            if (instance == null || m_Wrapper.m_GameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameActionsCallbackInterfaces.Add(instance);
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Action1.started += instance.OnAction1;
            @Action1.performed += instance.OnAction1;
            @Action1.canceled += instance.OnAction1;
            @ShiftSelect.started += instance.OnShiftSelect;
            @ShiftSelect.performed += instance.OnShiftSelect;
            @ShiftSelect.canceled += instance.OnShiftSelect;
        }

        private void UnregisterCallbacks(IGameActions instance)
        {
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Action1.started -= instance.OnAction1;
            @Action1.performed -= instance.OnAction1;
            @Action1.canceled -= instance.OnAction1;
            @ShiftSelect.started -= instance.OnShiftSelect;
            @ShiftSelect.performed -= instance.OnShiftSelect;
            @ShiftSelect.canceled -= instance.OnShiftSelect;
        }

        public void RemoveCallbacks(IGameActions instance)
        {
            if (m_Wrapper.m_GameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameActions instance)
        {
            foreach (var item in m_Wrapper.m_GameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameActions @Game => new GameActions(this);

    // CameraMovement
    private readonly InputActionMap m_CameraMovement;
    private List<ICameraMovementActions> m_CameraMovementActionsCallbackInterfaces = new List<ICameraMovementActions>();
    private readonly InputAction m_CameraMovement_Movement;
    public struct CameraMovementActions
    {
        private @GameInputActions m_Wrapper;
        public CameraMovementActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CameraMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(ICameraMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(ICameraMovementActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMovementActions @CameraMovement => new CameraMovementActions(this);

    // GameUI
    private readonly InputActionMap m_GameUI;
    private List<IGameUIActions> m_GameUIActionsCallbackInterfaces = new List<IGameUIActions>();
    private readonly InputAction m_GameUI_HotBar1;
    private readonly InputAction m_GameUI_HotBar2;
    private readonly InputAction m_GameUI_HotBar3;
    public struct GameUIActions
    {
        private @GameInputActions m_Wrapper;
        public GameUIActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HotBar1 => m_Wrapper.m_GameUI_HotBar1;
        public InputAction @HotBar2 => m_Wrapper.m_GameUI_HotBar2;
        public InputAction @HotBar3 => m_Wrapper.m_GameUI_HotBar3;
        public InputActionMap Get() { return m_Wrapper.m_GameUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameUIActions set) { return set.Get(); }
        public void AddCallbacks(IGameUIActions instance)
        {
            if (instance == null || m_Wrapper.m_GameUIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameUIActionsCallbackInterfaces.Add(instance);
            @HotBar1.started += instance.OnHotBar1;
            @HotBar1.performed += instance.OnHotBar1;
            @HotBar1.canceled += instance.OnHotBar1;
            @HotBar2.started += instance.OnHotBar2;
            @HotBar2.performed += instance.OnHotBar2;
            @HotBar2.canceled += instance.OnHotBar2;
            @HotBar3.started += instance.OnHotBar3;
            @HotBar3.performed += instance.OnHotBar3;
            @HotBar3.canceled += instance.OnHotBar3;
        }

        private void UnregisterCallbacks(IGameUIActions instance)
        {
            @HotBar1.started -= instance.OnHotBar1;
            @HotBar1.performed -= instance.OnHotBar1;
            @HotBar1.canceled -= instance.OnHotBar1;
            @HotBar2.started -= instance.OnHotBar2;
            @HotBar2.performed -= instance.OnHotBar2;
            @HotBar2.canceled -= instance.OnHotBar2;
            @HotBar3.started -= instance.OnHotBar3;
            @HotBar3.performed -= instance.OnHotBar3;
            @HotBar3.canceled -= instance.OnHotBar3;
        }

        public void RemoveCallbacks(IGameUIActions instance)
        {
            if (m_Wrapper.m_GameUIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameUIActions instance)
        {
            foreach (var item in m_Wrapper.m_GameUIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameUIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameUIActions @GameUI => new GameUIActions(this);
    public interface IGameActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnAction1(InputAction.CallbackContext context);
        void OnShiftSelect(InputAction.CallbackContext context);
    }
    public interface ICameraMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IGameUIActions
    {
        void OnHotBar1(InputAction.CallbackContext context);
        void OnHotBar2(InputAction.CallbackContext context);
        void OnHotBar3(InputAction.CallbackContext context);
    }
}
